dist = "pwexp"),
params_surv(coefs = lapply(as.list(log(mr)), matrixv),
aux = list(time = c(0:time_horizon)),
dist = "pwexp"),
params_surv(coefs = lapply(as.list(log(mr)), matrixv),
aux = list(time = c(0:time_horizon)),
dist = "pwexp"),
params_surv(coefs = lapply(as.list(log(mr)), matrixv),
aux = list(time = c(0:time_horizon)),
dist = "pwexp"),
params_surv(coefs = lapply(as.list(log(mr)), matrixv),
aux = list(time = c(0:time_horizon)),
dist = "pwexp"),
# 12. Post TKR to surgery death
params_surv(coefs = list(rate = rep(log(tkr_mortality_90d[, 1]), each = n_patients),
as.matrix(rep(-100, n_samples_temp))),
aux = list(time = tkr_mortality_times_90d),
dist = "pwexp"),
# 13-15. Post 1st revision to surgery death
params_surv(coefs = list(rate = rep(log(revision_mortality_90d[, 1]), each = n_patients),
as.matrix(rep(-100, n_samples_temp))),
aux = list(time = revision_mortality_times_90d),
dist = "pwexp"),
params_surv(coefs = list(rate = rep(log(revision_mortality_90d[, 1]), each = n_patients),
as.matrix(rep(-100, n_samples_temp))),
aux = list(time = revision_mortality_times_90d),
dist = "pwexp"),
params_surv(coefs = list(rate = rep(log(revision_mortality_90d[, 1]), each = n_patients),
as.matrix(rep(-100, n_samples_temp))),
aux = list(time = revision_mortality_times_90d),
dist = "pwexp"),
# 16. Post 2nd revision to surgery death
# Depends on initial 90d period and ongoing risk of higher revision
params_surv(coefs = list(rep(rerevision_mortality_90d[, 1], each = n_patients),
rep(rerevision_mortality_90d[, 2], each = n_patients)),
aux = list(time = rerevision_mortality_times_90d),
dist = "pwexp")
)
# Now simulate the outcomes for all patients for this sample and this implant
# Need temporary hesim data object with only one strategy and one patient
hesim_dat_temp <- hesim_data(strategies = strategies[strategies$strategy_name == implant_name],
patients = patients[1, ],  # All patients assumed identical at baseline
states = states)
transition_model_data <- expand(hesim_dat_temp, by = c("strategies", "patients"))
transition_model_data[, cons := 1]
transition_model_data[, x1 := 1]
# Transition model
transition_model <- create_IndivCtstmTrans(transition_model_params,
input_data = transition_model_data,
trans_mat = tmat,
clock = "forward",
start_age = patients$age[1],
reset_states = c(1, 2))
set.seed(2243534)
disprog[[implant_name]] <- transition_model$sim_disease(max_t = time_horizon, max_age = (starting_age + time_horizon))
TKR_early = disprog[[implant_name]][from == 1 & to == 2, ]$time_stop<3
n_TKR_early = length(TKR_early[TKR_early == TRUE])
TKR_middle = (disprog[[implant_name]][from == 1 & to == 3, ]$time_stop>=3)& (disprog[[implant_name]][from == 1 & to == 3, ]$time_stop<10)
n_TKR_middle = length(TKR_middle[TKR_middle == TRUE])
TKR_late = disprog[[implant_name]][from == 1 & to == 4, ]$time_stop>=10
n_TKR_late = length(TKR_late[TKR_late == TRUE])
early_second = disprog[[implant_name]][from == 2 & to == 5, ]
middle_second = disprog[[implant_name]][from == 3 & to == 5, ]
late_second = disprog[[implant_name]][from == 4 & to == 5, ]
# Need to change sample and patient_id to match expected format for hesim
disprog[[implant_name]]$patient_id <- disprog[[implant_name]]$sample %% n_patients
# Replace patient 0 with patient n_patient
disprog[[implant_name]]$patient_id[which(disprog[[implant_name]]$patient_id == 0)] <- n_patients
disprog[[implant_name]]$sample <- ceiling(disprog[[implant_name]]$sample / n_patients)
# Add correct implant strategy number
disprog[[implant_name]]$strategy_id <- which(implant_names == implant_name)
# Also simulate average state probabilities
stateprobs[[implant_name]] <- transition_model$sim_stateprobs(t = 0:(time_horizon),
disprog = disprog[[implant_name]])
# Check that state probs make sense
# with(stateprobs[[implant_name]], prob[strategy_id == which(implant_names == implant_name) & sample == 1 & t==20]) / n_patients
} # End loop over implants
disprog_combined <- rbindlist(disprog)
disprog_combined
attributes_size <- c(n_samples, n_strategies, n_patients, n_states + 2)
names(attributes_size) <- c("n_samples", "n_strategies", "n_patients","n_states")
setattr(disprog_combined, "size", attributes_size)
# Correctly set the absorbing attribute
attributes_absorbing <- c(6, 7)
names(attributes_absorbing) <- c("Surgery Death", "Death")
setattr(disprog_combined, "absorbing", attributes_absorbing)
cost_utility_models <- generate_cost_utility_models(n_samples = n_samples,
hesim_dat = hesim_dat,
model_inputs = model_inputs)
# Economic model combining everything
economic_model <- IndivCtstm$new(trans_model = transition_model,
utility_model = cost_utility_models$utility_model,
cost_models = cost_utility_models$cost_models)
economic_model$disprog_ <- disprog_combined
economic_model$disprog_
economic_model$sim_qalys(dr = discount_rate)
economic_model$sim_costs(dr = discount_rate)
# Divide by number of patients
economic_model$costs_[, c("costs")] <- economic_model$costs_[, c("costs")] / n_patients
economic_model$qalys_[, c("qalys", "lys")] <- economic_model$qalys_[, c("qalys", "lys")] / n_patients
library(hesim)
library(data.table)
library(kableExtra)
library(flexsurv)
library(ggplot2)
library(MASS)
library(readxl)
library(BCEA)
library(dplyr)
library(survival)
library(data.table)
n_samples <- 10
n_patients <- 10
discount_rate <- 0.035
age_range <- c(55,64)
starting_age <- ceiling(mean(age_range))
final_age <- 100
initial_age = 55
# Specify the gender
sample_gender <- "female"
#sys.time <-system.time({
# Implant details
#data_directory =  "//ads.bris.ac.uk/folders/Health Sciences/Bristol Medical School/BRMS/Studies/KNIPS/Economic analyses/Yixin/continuous cohort model/data"
# On HT computer
data_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/data"
code_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/code (hazard rate)"
implant_costs_raw <- read_excel(paste0(data_directory,"/cohort model inputs.xlsx"), sheet = "costs")
n_implants <- dim(implant_costs_raw[1:12,1])[1]
implant_names <- implant_costs_raw$treatment[1:12]
source(paste0(code_directory, "/cost-utilitiy.R"))
source(paste0(code_directory, "/input.R"))
source(paste0(code_directory, "/outputs_.R"))
# Time horizon is based on final age and starting age. The latter is age/gender dependent
time_horizon <- final_age - starting_age
# Number of time intervals only used for costs and utilities
# as these are discretized
n_time_intervals <- time_horizon
# All state names
state_names <- c("Post TKR",
"Early revision",  "middle revision", "late revision", "second revision", "Death", "Surgery Death")
############################################################
## hesim specification #####################################
############################################################
# Treatment strategies - one for each implant
strategies <- data.table(
strategy_id = 1:n_implants,
strategy_name = implant_names
)
n_strategies <- nrow(strategies)
# Patients
# Randomly sample their ages between the lower and upper age range limits
patients <- data.table(
patient_id = 1:n_patients,
gender = sample_gender,
age = rep(age_range[2] - 5, n_patients)
)
# Non-death States - total hip replacement (THR) and revisions
states <- data.table( # Non-other cause death health states
state_id = 1:5,
state_name = state_names[1:5]#, "Surgery Death")
)
n_states <- nrow(states)
# "hesim data"
hesim_dat <- hesim_data(strategies = strategies,
patients = patients,
states = states)
# Nice labels - added the two death states manually
labs <- get_labels(hesim_dat)
labs$state_id <- c(1:length(state_names))
names(labs$state_id) <- state_names
# Possible transitions
# Only 8 (first revision, 2nd revision, 3 background mortality death rates, 3 surgery death rates)
tmat <- rbind(c(NA, 1, 2, 3, NA, 7, 12), # From "Post TKR"
c(NA, NA, NA, NA, 4, 8, 13), # From "Post 1st revision"
c(NA, NA, NA, NA, 5, 9, 14), # From "Post 2nd revision"
c(NA, NA, NA, NA, 6, 10, 15), # From "Surgery Death" (i.e., no transitions)
c(NA, NA, NA, NA, NA, 11, 16),
c(NA, NA, NA, NA, NA, NA, NA),
c(NA, NA, NA, NA, NA, NA, NA)) # From "Death" (i.e., no transitions)
colnames(tmat) <- rownames(tmat) <- names(labs$state_id)
############################################################
## Run model ###############################################
############################################################
model_inputs <- generate_model_inputs(n_samples,
age_range = age_range,
sample_gender = sample_gender)
system.time({
model_outputs <- generate_model_outputs(hesim_dat = hesim_dat,
model_inputs = model_inputs)
})
############################################################
economic_model <- model_outputs$economic_model
reference_implant <- "Cem CR_Fix Mod"
ce_sim <- economic_model$summarize()
summary(ce_sim, labels = labs) %>%
format()
library(hesim)
library(data.table)
library(kableExtra)
library(flexsurv)
library(ggplot2)
library(MASS)
library(readxl)
library(BCEA)
library(dplyr)
library(survival)
library(data.table)
n_samples <- 10
n_patients <- 10
discount_rate <- 0.035
age_range <- c(55,64)
starting_age <- ceiling(mean(age_range))
final_age <- 100
initial_age = 55
# Specify the gender
sample_gender <- "female"
#sys.time <-system.time({
# Implant details
#data_directory =  "//ads.bris.ac.uk/folders/Health Sciences/Bristol Medical School/BRMS/Studies/KNIPS/Economic analyses/Yixin/continuous cohort model/data"
# On HT computer
data_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/data"
code_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/code (hazard rate)"
implant_costs_raw <- read_excel(paste0(data_directory,"/cohort model inputs.xlsx"), sheet = "costs")
n_implants <- dim(implant_costs_raw[1:12,1])[1]
implant_names <- implant_costs_raw$treatment[1:12]
source(paste0(code_directory, "/cost-utility_HT.R"))
source(paste0(code_directory, "/input_HT.R"))
source(paste0(code_directory, "/outputs_HT.R"))
library(hesim)
library(data.table)
library(kableExtra)
library(flexsurv)
library(ggplot2)
library(MASS)
library(readxl)
library(BCEA)
library(dplyr)
library(survival)
library(data.table)
n_samples <- 10
n_patients <- 10
discount_rate <- 0.035
age_range <- c(55,64)
starting_age <- ceiling(mean(age_range))
final_age <- 100
initial_age = 55
# Specify the gender
sample_gender <- "female"
#sys.time <-system.time({
# Implant details
#data_directory =  "//ads.bris.ac.uk/folders/Health Sciences/Bristol Medical School/BRMS/Studies/KNIPS/Economic analyses/Yixin/continuous cohort model/data"
# On HT computer
data_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/data"
code_directory = "C:/Users/thomh/OneDrive/Documents/Bristol/KNIPS/code/KNIPS continuous cohort model Yixin Nov2022/code (hazard rate)"
implant_costs_raw <- read_excel(paste0(data_directory,"/cohort model inputs.xlsx"), sheet = "costs")
n_implants <- dim(implant_costs_raw[1:12,1])[1]
implant_names <- implant_costs_raw$treatment[1:12]
source(paste0(code_directory, "/cost-utility_HT.R"))
source(paste0(code_directory, "/input_HT.R"))
source(paste0(code_directory, "/outputs_HT.R"))
# Time horizon is based on final age and starting age. The latter is age/gender dependent
time_horizon <- final_age - starting_age
# Number of time intervals only used for costs and utilities
# as these are discretized
n_time_intervals <- time_horizon
# All state names
state_names <- c("Post TKR",
"Early revision",  "middle revision", "late revision", "second revision", "Death", "Surgery Death")
############################################################
## hesim specification #####################################
############################################################
# Treatment strategies - one for each implant
strategies <- data.table(
strategy_id = 1:n_implants,
strategy_name = implant_names
)
n_strategies <- nrow(strategies)
# Patients
# Randomly sample their ages between the lower and upper age range limits
patients <- data.table(
patient_id = 1:n_patients,
gender = sample_gender,
age = rep(age_range[2] - 5, n_patients)
)
# Non-death States - total hip replacement (THR) and revisions
states <- data.table( # Non-other cause death health states
state_id = 1:5,
state_name = state_names[1:5]#, "Surgery Death")
)
n_states <- nrow(states)
# "hesim data"
hesim_dat <- hesim_data(strategies = strategies,
patients = patients,
states = states)
# Nice labels - added the two death states manually
labs <- get_labels(hesim_dat)
labs$state_id <- c(1:length(state_names))
names(labs$state_id) <- state_names
# Possible transitions
# Only 8 (first revision, 2nd revision, 3 background mortality death rates, 3 surgery death rates)
tmat <- rbind(c(NA, 1, 2, 3, NA, 7, 12), # From "Post TKR"
c(NA, NA, NA, NA, 4, 8, 13), # From "Post 1st revision"
c(NA, NA, NA, NA, 5, 9, 14), # From "Post 2nd revision"
c(NA, NA, NA, NA, 6, 10, 15), # From "Surgery Death" (i.e., no transitions)
c(NA, NA, NA, NA, NA, 11, 16),
c(NA, NA, NA, NA, NA, NA, NA),
c(NA, NA, NA, NA, NA, NA, NA)) # From "Death" (i.e., no transitions)
colnames(tmat) <- rownames(tmat) <- names(labs$state_id)
############################################################
## Run model ###############################################
############################################################
model_inputs <- generate_model_inputs(n_samples,
age_range = age_range,
sample_gender = sample_gender)
system.time({
model_outputs <- generate_model_outputs(hesim_dat = hesim_dat,
model_inputs = model_inputs)
})
shiny::runApp('Bristol/R for CEA/Shiny GUI CEA experiments/CEA_GUI_1')
generate_beta_parameters <- function(mu, se = NULL, ll = NULL, ul = NULL) {
if(is.null(se)) {se <- (ul - ll) / (2*1.96)}
alpha_plus_beta <- mu*(1-mu)/(se*se)
alpha <- mu *( alpha_plus_beta)
beta <- alpha_plus_beta - alpha
return(list("alpha" = alpha,
"beta" = beta))
}
generate_beta_parameters(mu = 0.6, ll =0, ul = 1)
mean(rbeta(1000 2.2, 1.475))
mean(rbeta(1000, 2.2, 1.475))
se(rbeta(1000, 2.2, 1.475))
sd(rbeta(1000, 2.2, 1.475))
library(flexsurv)
devtools::install_github(
"roche/Global-HTA-Evidence-Open",
subdir = "Rpackages/descem"
)
library(descem)
devtools::install_github(
"https://github.com/Roche/descem"
)
library(descem)
add_item()
library(dplyr)
#>
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#>
#>     filter, lag
#> The following objects are masked from 'package:base':
#>
#>     intersect, setdiff, setequal, union
library(flexsurv)
#> Loading required package: survival
library(ggplot2)
library(kableExtra)
#>
#> Attaching package: 'kableExtra'
#> The following object is masked from 'package:dplyr':
#>
#>     group_rows
library(purrr)
#>
#> Attaching package: 'purrr'
#> The following object is masked from '.my.env':
#>
#>     keep
library(tidyr)
#Put objects here that do not change on any patient or intervention loop
common_all_inputs <-add_item(
util.sick = 0.8,
util.sicker = 0.5,
cost.sick = 3000,
cost.sicker = 7000,
cost.int = 1000,
coef_noint = log(0.2),
HR_int = 0.8)
common_pt_inputs <- add_item(death= max(0.0000001,rnorm(n=1, mean=12, sd=3)))
common_pt_inputs
rnorm(n=1, mean=12, sd=3)
max(0.0000001,rnorm(n=1, mean=12, sd=3))
#Put objects here that do not change on any patient or intervention loop
common_all_inputs <-add_item(
util.sick = 0.8,
util.sicker = 0.5,
cost.sick = 3000,
cost.sicker = 7000,
cost.int = 1000,
coef_noint = log(0.2),
HR_int = 0.8)
#Put objects here that do not change as we loop through treatments for a patient
common_pt_inputs <- add_item(death= max(0.0000001,rnorm(n=1, mean=12, sd=3)))
#Put objects here that change as we loop through treatments for each patient (e.g. events can affect fl.tx, but events do not affect nat.os.s)
unique_pt_inputs <- add_item(fl.sick = 1)
init_event_list <-
add_tte(trt="noint", evts = c("sick","sicker","death") ,input={ #intervention
sick <- 0
sicker <- draw_tte(1,dist="exp", coef1=coef_noint)
}) %>%  add_tte(trt="int", evts = c("sick","sicker","death") ,input={
sick <- 0
sicker <- draw_tte(1,dist="exp", coef1=coef_noint, hr = HR_int)
})
init_event_list
add_item
(120946-106921)/(3.77-3.39)
rnorm(1000, 0, 1)
?runif
rgamma
?rgamma
mean(rgamma(10000, shape = 2, scale = 15))
rbeta(1000, shape1 = 2, shape2= 100)
mean(rbeta(1000, shape1 = 12, shape2= 100))
mean(rbeta(1000, shape1 = 12, shape2= 100))
12/112
library(VGAM)
rdirichlet
rdirich()
?rdiric
rlnorm(1000, 10, 5)
mean(rlnorm(1000, 10, 5))
mean(rlnorm(1000, 2, 5))
?hist
hist(rlnorm(1000, 10, 5), density = TRUE)
X <- rlnorm(1000, 10, 5)
hist(X, prob = TRUE)
hist(X)
x <- rlnorm(1000, 2, 5)
hist(x, prob = TRUE)
x
x <- log(rlnorm(1000, 2, 5))
hist(x, prob = TRUE)
?hist
x <- rlnorm(1000, 2, 0.1)
hist(x, prob = TRUE)
x <- rlnorm(1000, 2, 1)
hist(x, prob = TRUE)
lines(density(x))
lines(density(x, adjust = 2))
lines(density(x, adjust = 2), lwd = 2)
hist(x, prob = TRUE, col = 0)
lines(density(x, adjust = 2), lwd = 2)
plot(c(0, 0), xlim = c(0, 120), ylim = c(0,0.1))
lines(density(x, adjust = 2), lwd = 2)
lines(density(rlnorm(1000, 2, 1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 1, 2), adjust = 2), lwd = 2)
x <- rlnorm(1000, 1, 2)
hist(x, prob = TRUE, col = 0)
lines(density(rlnorm(10000, 1, 2), adjust = 2), lwd = 2)
plot(c(0, 0), col = 0, xlim = c(0, 120), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 3, 2), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 3, 1.5), adjust = 2), lwd = 2)
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 3, 1.5), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 5, 1.5), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 5, 0.1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 4, 0.1), adjust = 2), lwd = 2)
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 4, 0.1), adjust = 2), lwd = 2, col =3)
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 4, 0.1), adjust = 2), lwd = 2, col =3)
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 4, 0.1), adjust = 2), lwd = 2, col =3)
legend("topright", legend = c("Mean 2, SD 1", "Mean 3, SD 1", "Mean 3, SD 0.1"))
)
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 3, 0.1), adjust = 2), lwd = 2, col =3)
lines(density(rlnorm(10000, 3, 0.5), adjust = 2), lwd = 2, col =3)
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 3, 0.5), adjust = 2), lwd = 2, col =3)
legend("topright", legend = c("Mean 2, SD 1", "Mean 3, SD 1", "Mean 3, SD 0.5"))
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 3, 0.5), adjust = 2), lwd = 2, col =3)
legend("topright", legend = c("Mean 2, SD 1", "Mean 3, SD 1", "Mean 3, SD 0.5"))
lines(density(rlnorm(10000, 4, 0.5), adjust = 2), lwd = 2, col =3)
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1))
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 3, 0.5), adjust = 2), lwd = 2, col = 3)
lines(density(rlnorm(10000, 4, 0.5), adjust = 2), lwd = 2, col = 4)
legend("topright", col = c(1:4), lwd = 2,
legend = c("Mean 2, SD 1", "Mean 3, SD 1", "Mean 3, SD 0.5", "Mean 4, SD 0.5"))
plot(c(0, 0), col = 0, xlim = c(0, 250), ylim = c(0,0.1),
xlab = "Natural scale", ylab = "Lognormal probability density")
lines(density(rlnorm(10000, 2, 1), adjust = 2), lwd = 2, col = 1)
lines(density(rlnorm(10000, 3, 1), adjust = 2), lwd = 2, col = 2)
lines(density(rlnorm(10000, 3, 0.5), adjust = 2), lwd = 2, col = 3)
lines(density(rlnorm(10000, 4, 0.5), adjust = 2), lwd = 2, col = 4)
legend("topright", col = c(1:4), lwd = 2,
legend = c("Mean 2, SD 1", "Mean 3, SD 1", "Mean 3, SD 0.5", "Mean 4, SD 0.5"))
setwd("~/Bristol/REEEVR Efficient EVPPI tool/Code/reeevr_1")
load_all(".")
library(devtools)
load_all(".")
load_all(".")
warnings()
load_all(".")
warnings()
is_blank()
